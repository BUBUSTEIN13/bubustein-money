plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}
<<<<<<< Updated upstream

=======
allprojects {
    archivesBaseName = "${rootProject.archives_base_name}-forge-mc${rootProject.minecraft_version}"
}
>>>>>>> Stashed changes
architectury {
    platformSetupLoomIde()
    forge()
}
loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfig "bubusteinmoneymod-common.mixins.json"
        mixinConfig "bubusteinmoneymod.mixins.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
<<<<<<< Updated upstream
    // Remove the next line if you don't want to depend on the API
    modApi "me.shedaniel:architectury-forge:${rootProject.architectury_version}"

=======
    modApi "me.shedaniel:architectury-forge:${rootProject.architectury_version}"
>>>>>>> Stashed changes
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }
<<<<<<< Updated upstream

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.

}
=======
}
>>>>>>> Stashed changes
