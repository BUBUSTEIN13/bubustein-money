plugins {
    id 'com.gradleup.shadow' version '8.3.0'
    id "me.shedaniel.unified-publishing"
}
allprojects {
    base {
        archivesName.set("${rootProject.mod_id}-NeoForge-mc${rootProject.minecraft_version}")
    }
}
architectury {
    platformSetupLoomIde()
    neoForge()
}
loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}
repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/'
    }
    maven { url "https://maven.shedaniel.me" }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}
configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}
dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:${rootProject.rei_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:${rootProject.rei_version}"
    modCompileOnlyApi("mezz.jei:jei-${rootProject.minecraft_version}-neoforge-api:${rootProject.jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${rootProject.minecraft_version}-common-api:${rootProject.jei_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
}
processResources {
    inputs.property "version", project.version
    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}
shadowJar {
    exclude "fabric.mod.json"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}
remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}
sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }
}
unifiedPublishing {
    project {
        displayName = "[Neoforge $rootProject.minecraft_version] v$rootProject.mod_version"
        releaseType = "$rootProject.artifact_type"
        changelog = releaseChangelog()
        gameVersions = ["1.21", "1.21.1"]
        gameLoaders = ["neoforge"]
        mainPublication remapJar
        relations {
            depends {
                curseforge = "architectury-api"
                modrinth = "architectury-api"
            }
            optional {
                curseforge = "roughly-enough-items"
                modrinth = "rei"
            }
            optional {
                curseforge = "jei"
                modrinth = "jei"
            }
            conflicts {
                curseforge = "entityculling"
                modrinth = "entityculling"
            }
            conflicts {
                curseforge = "moreculling"
                modrinth = "moreculling"
            }
        }
        def isDev = project.findProperty("isDev")?.toBoolean() ?: false
        if (!isDev) {
            def CURSE_API_KEY = project.findProperty("CURSE_API_KEY") ?: System.getenv("CURSE_API_KEY")
            if (CURSE_API_KEY != null) {
                curseforge {
                    token = CURSE_API_KEY
                    id = rootProject.curseforge_id
                    gameVersions.addAll "Java 21", project.minecraft_version
                }
            }
            def MODRINTH_TOKEN = project.findProperty("MODRINTH_TOKEN") ?: System.getenv("MODRINTH_TOKEN")
            if (MODRINTH_TOKEN != null) {
                modrinth {
                    token = MODRINTH_TOKEN
                    id = rootProject.modrinth_id
                    version = "$project.version+$project.name"
                    gameVersions.addAll project.minecraft_version
                }
            }
        }
    }
}